using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.Sockets;
using System.Net;
using System.Security.Cryptography;
using System.Xml;
using System.IO;

namespace chat_rsa
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        // == variables ==
        // used to communicate
        Socket sckCommunication;
        EndPoint epLocal, epRemote;

        byte[] EncryptedData;
        byte[] DecryptedData;
        string publickey = "";
        string privatekey = "";

        // buffer to receive info
        byte[] buffer;

        private string GetLocalIP()
        {
            IPHostEntry host;
            host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (IPAddress ip in host.AddressList)
            {
                if (ip.AddressFamily == AddressFamily.InterNetwork)
                {
                    return ip.ToString();
                }
            }
            return "127.0.0.1";
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void Form1_Load(object sender, EventArgs e)
        {

            RSACryptoServiceProvider RsaKey = new RSACryptoServiceProvider();
            publickey = RsaKey.ToXmlString(false);
            privatekey = RsaKey.ToXmlString(true);

            // set up socket
            sckCommunication = new Socket(AddressFamily.InterNetwork,
                                SocketType.Stream, ProtocolType.Tcp);
            sckCommunication.SetSocketOption(SocketOptionLevel.Socket,
                                SocketOptionName.ReuseAddress, true);

            // get own ip
            myIP.Text = GetLocalIP();
            friendIP.Text = GetLocalIP();
        }

        private void OperatorCallBack(IAsyncResult ar)
        {
            try
            {
                int size = sckCommunication.EndReceiveFrom(ar, ref epRemote);

                // check if theres actually information
                if (size > 0)
                {
                    // used to help us on getting the data
                    byte[] aux = new byte[1464];
                    byte[] data = new byte[1464];
                    // gets the data
                    aux = (byte[])ar.AsyncState;

                    // converts from data[] to string
                    System.Text.UnicodeEncoding enc =
                                            new System.Text.UnicodeEncoding();
                    string msg = enc.GetString(aux);

                    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
                    try
                    {
                        if (privatekey.Length == 0)
                        {
                            MessageBox.Show("Bad private key...");
                            return;
                        }
                        else
                        {
                            rsa.FromXmlString(privatekey);
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Problem with RSA... \n" + ex.Message.ToString());
                    }

                    try
                    {
                        data = Convert.FromBase64String(msg);
                    }
                    catch (FileNotFoundException)
                    {
                        MessageBox.Show("Data file does not exist...");
                        return;
                    }

                    try
                    {
                        DecryptedData = rsa.Decrypt(data, false);
                    }
                    catch (CryptographicException ex)
                    {
                        MessageBox.Show("Crypto error... \n" + ex.Message.ToString());
                        return;
                    }

                    string text = Encoding.UTF8.GetString(DecryptedData);

                    for (int i = 0; i < data.Length - 1; i++)
                    {
                        data.SetValue((byte)0, i);
                    }
                    for (int i = 0; i < DecryptedData.Length - 1; i++)
                    {
                        DecryptedData.SetValue((byte)0, i);
                    }



                    // adds to listbox
                    listBox1.Items.Add("Friend: " + text);
                }

                // starts to listen again
                buffer = new byte[1464];
                sckCommunication.BeginReceiveFrom(buffer, 0,
                                    buffer.Length, SocketFlags.None,
                    ref epRemote, new AsyncCallback(OperatorCallBack), buffer);
            }
            catch (Exception exp)
            {
                MessageBox.Show(exp.ToString());
            }
        }

        private void buttonSend_Click(object sender, EventArgs e)
        {
            RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
            try
            {
                if (publickey.Length == 0)
                {
                    MessageBox.Show("Bad public key...");
                    return;
                }
                else
                {
                    rsa.FromXmlString(publickey);
                }
            }
            catch (Exception ex)
            {
             
                MessageBox.Show("Problem with RSA... \n" + ex.Message.ToString());
            }


            // converts from string to byte[]
            System.Text.UnicodeEncoding enc =
                    new System.Text.UnicodeEncoding();
            byte[] msg = new byte[1464];
            //msg = enc.GetBytes(text_msg.Text);

            try
            {
                msg = Encoding.UTF8.GetBytes(text_msg.Text);
            }
            catch (Exception ss)
            {
                MessageBox.Show(ss.ToString());
                return;
            }

            try
            {
                EncryptedData = rsa.Encrypt(msg, false);
            }
            catch (CryptographicException ex)
            {
                MessageBox.Show("Crypto error... \n" + ex.Message.ToString());
            }
            //txtEncryptedText.Text = Encoding.UTF8.GetString(EncryptedData);
            string msgBase64 = Convert.ToBase64String(EncryptedData);
            byte[] data = new byte[1024];
            data = enc.GetBytes(msgBase64);
            for (int i = 0; i < msg.Length - 1; i++)
            {
                msg.SetValue((byte)0, i);
            }
            for (int i = 0; i < EncryptedData.Length - 1; i++)
            {
                EncryptedData.SetValue((byte)0, i);
            }

            // sending the message
            sckCommunication.Send(data);

            // add to listbox
            listBox1.Items.Add("You: " + text_msg.Text);

            // clear txtMessage
            text_msg.Clear();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            // bind socket                        
            epLocal = new IPEndPoint(IPAddress.Parse(myIP.Text),
                                    Convert.ToInt32(myPort.Text));
            sckCommunication.Bind(epLocal);

            // connect to remote ip and port
            epRemote = new IPEndPoint(IPAddress.Parse(friendIP.Text),
                                    Convert.ToInt32(friendPort.Text));
            sckCommunication.Connect(epRemote);

            // starts to listen to an specific port
            buffer = new byte[1464];
            sckCommunication.BeginReceiveFrom(buffer, 0, buffer.Length,
                                     SocketFlags.None, ref epRemote,
                            new AsyncCallback(OperatorCallBack), buffer);

            // release button to send message
            buttonSend.Enabled = true;
        }
    }
}
